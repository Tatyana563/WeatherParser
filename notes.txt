	myAPIkey  c2e489273fdc0df57969e7049a9a37b0


api.openweathermap.org/data/2.5/weather?q=London&appid=c2e489273fdc0df57969e7049a9a37b0

1) Average temperature in the city between 2 dates
SELECT AVG(main_info.temp), city.name
FROM main_info
         INNER JOIN weather_point ON main_info.id = weather_point.main_info_id
         INNER JOIN city ON weather_point.city_id = city.id
WHERE city.name='Milan' AND weather_point.date >= '2020-08-25' and weather_point.date <= '2020-08-26';

2) Find cities with descriprion "Clouds" for last 30 min
SELECT DISTINCT (city.name), weather_condition.description, weather_point.date
FROM city
         INNER JOIN weather_point on city.id = weather_point.city_id
         INNER JOIN weather_point_conditions on weather_point_conditions.weather_point_id = weather_point.id
         INNER JOIN weather_condition on weather_point_conditions.weather_point_id = weather_condition.id
WHERE weather_condition.main = 'Clouds' AND  weather_point.date > (now() - interval 200 minute);

3) General Amount of precipitations for one city for 24 hours

SELECT city.name,  SUM(rain_info.one_hour)
FROM weather_point
INNER JOIN city on city.id=weather_point.city_id
INNER JOIN rain_info on rain_info.id=weather_point.rain_info_id
WHERE city.name='London' AND weather_point.date > (now() - interval 24 hour);

4) Select top-3 cities with the highest temperature (remove duplicates)
SELECT (main_info.temp), city.name
FROM main_info
         INNER JOIN weather_point ON main_info.id = weather_point.main_info_id
         INNER JOIN city ON weather_point.city_id = city.id
WHERE weather_point.date >= '2020-08-25' and weather_point.date <= '2020-08-26'
ORDER BY main_info.temp DESC LIMIT 3;

5) Find city with max avg temp ("-" dont know how add city.name)
SELECT MAX(avg_value)
FROM (SELECT AVG(main_info.temp) avg_value FROM city, main_info
                                                    INNER JOIN weather_point ON main_info.id = weather_point.main_info_id
                                                    INNER JOIN city ON weather_point.city_id = city.id

    GROUP BY city.name


) as maxAvgTemp;


Issues:

-getSumOfPrecipitations (add time);

-@GetMapping("/weather/findSum") - branch_1, add Instant to endpoint

- remote duplicates of cities

SELECT (main_info.temp), city.name
FROM main_info
         INNER JOIN weather_point ON main_info.id = weather_point.main_info_id
         INNER JOIN city ON weather_point.city_id = city.id
WHERE weather_point.date >= '2020-08-29' and weather_point.date <= '2020-09-01'
ORDER BY main_info.temp DESC LIMIT 3;

********************************************
Different queries:
1) a)Second highest salary

   INSERT INTO employee(id_salary, salary)
   VALUES(4,250);


  SELECT * from employee

   SELECT salary, id_salary FROM (SELECT salary, id_salary FROM employee ORDER BY salary DESC LIMIT 2) AS Emp ORDER BY salary LIMIT 1;
   b) second lowest salary
   SELECT id_salary, salary FROM (SELECT id_salary, salary from employee ORDER BY salary ASC LIMIT 2) as Emp ORDER BY salary DESC LIMIT 1;

   2) Find duplicates:
 CREATE TABLE IF NOT EXISTS employee
 (
     id_salary INT AUTO_INCREMENT PRIMARY KEY,
     salary    INT,
     email     VARCHAR(64)
 );

INSERT INTO employee(id_salary, salary, email)
VALUES(4,350, 'frank@gmail.com');

   SELECT e.*
   FROM employee e
   JOIN (SELECT salary, email, COUNT(*)
       FROM employee GROUP BY salary, email
       HAVING count(*)>1) b
   ON e.salary=b.salary
   AND e.email=b.email
   ORDER BY e.salary
3) Find monthly salary having year salary

SELECT email, round( salary/12,2) as 'Monthly salary'
FROM employee;


6) The following statement finds the top three products that have the highest inventory of every product line
CREATE table products(
       id INT AUTO_INCREMENT PRIMARY KEY,
       productLine VARCHAR(64),
       productName VARCHAR(64),
       quantityInStock int
   )
   INSERT INTO products(productLine,  productName,  quantityInStock )
   VALUES('Ships', 'Queen_Alice',273);

   WITH inventory
            AS (SELECT
                    productLine,
                    productName,
                    quantityInStock,
                    ROW_NUMBER() OVER (
                        PARTITION BY productLine
                        ORDER BY quantityInStock DESC) row_num
                FROM
                    products
       )
   SELECTselect email from employee order by email asc limit 1;
       productLine,
       productName,
       quantityInStock
   FROM
       inventory
   WHERE
           row_num <= 2;

 7) Get the first row of the table:
 select email from employee order by email asc limit 1;
 8) Find 3 last rows in a table without sorting
 SELECT * FROM employee WHERE employee.id_salary > (SELECT MAX(employee.id_salary) - 3 FROM employee)
 9) The second most highest salary (LIMIT n-1, n=2)
    SELECT
        *
    FROM
    employee
    ORDER BY salary DESC
    LIMIT 1 , 1;

********************************************************************
   Migration:

Liquidbase:

1) Pom dependency
    <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
        </dependency>
2) application.properties
spring.liquibase.change-log=classpath:db/liquibase-changelog.xml
3) In liquibase-changelog.xml include files with scripts:

<databaseChangeLog
           xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
            http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

       <include file="changelog/master.xml" relativeToChangelogFile="true"/>
       <include file="changelog/test.xml" relativeToChangelogFile="true"/>
   </databaseChangeLog>

4)master.xml include the script:
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                          http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

    <changeSet id="1" author="Tatyna">
        <sql>create table cloud_info
            (
            id                   int auto_increment
            primary key,
            percentage_of_clouds double not null
            );

        </sql>
    </changeSet>
</databaseChangeLog>



mvn clean flyway:migrate -Dflyway.configFile=/home/tatyana/IdeaProjects/WeatherParser/src/main/resources/application.properties



create table cloud_info
(
    id                   int auto_increment
        primary key,
    percentage_of_clouds double not null
);
create table rain_info
(
    id          int auto_increment
        primary key,
    one_hour    varchar(255) null,
    three_hours varchar(255) null
);

create table weather_point
(
    id            int auto_increment
        primary key,
    date          datetime(6) null,
    city_id       int         null,
    cloud_info_id int         null,
    daily_info_id int         null,
    main_info_id  int         null,
    rain_info_id  int         null,
    wind_info_id  int         null,
    constraint FK2td499gx87e431m5dblg6bakb
        foreign key (rain_info_id) references rain_info (id),
    constraint FK4udu9uofd3v1uplf4qsoyxfhs
        foreign key (main_info_id) references main_info (id),
    constraint FKi69qofeijw94keerenhciitt2
        foreign key (wind_info_id) references wind_info (id),
    constraint FKktbfmav4pw80fcvpi7c5mocm0
        foreign key (daily_info_id) references daily_info (id),
    constraint FKmy9iqetrvgnwknr7by5inxbg0
        foreign key (cloud_info_id) references cloud_info (id),
    constraint FKt8uh84m6lx241oivi4rgsighr
        foreign key (city_id) references city (id)
);

